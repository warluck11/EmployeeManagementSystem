
Every set of instruction work on IPO process 

I - Input 
P - Process 
O - Output 


Variables : variables are like empty container which
can save data/value 

1. Name/Identifier 
2. Data Type 
3. Data/Value 


Rules for Naming the Variable :
1. Name can only contain alphabets, digits, 
   underscore and dollar sign 
2. Name can not start with digit 
3. Name can only start with alphabets, underscore 
   and dollar sign 
4. Are case-sensitive
5. Can not use reserved keyword  



DataTypes : Describe type of data that will be saved inside the variables 
			How much of memory to be allocated to the variable 
			
			
	1. Primitive Data Type   (In-bulid Java data types)
	2. Non- Primitive Data Type (User defined data types)



	We have 8 types of primitive data types :
	
	
	1. Whole Numbers 
	
		1> byte			1 byte			-128 to 127
		2> short		2 bytes
		3> int			4 bytes
		4> long			8 bytes
		
	2. Decimal Number 
	
		5> float		4 bytes
		6> double 		8 bytes 
		
	3. Character 
	
		7> char 		2 bytes
		
	4. Other Data Types 
	
		8> boolean 		depends on jvm 
		
		
		
	* Literal : 
				If we provide value to the variable inside the code then it will 
				be known as Literal 
				
		Default Literal : 
				
				By default every whole number in java is considered as a Int
				By default every decimal number in java is considered as Double			
		
		
	Operator : 
				Operators are the symbols which will perform operation on variables or values. 
				
				
		1. Arithmetic Operator : 
				
					
					+
					-
					/
					*
					%

		2. Unary Operators 
		
				Post Increment/Decrement
				i++ 
				i--
				
				Pre Increment/Decrement 
				++i
				--i
				
		3. Assignment Operator 
		
		
				= (equal to)
				
			x = 10	
			
				a. Compound Assignment Operators  
				
				
					+=
					-=
					/=
					*=
					%=
					
				i += 10 => i = i + 10
				
				
		4. Comparison Operator 
		
		
				<
				>
				<=
				>=
				==
				!=
				
		5. Logical Operator 
		
		
				and   =>  && 
				or    =>  ||
				not   =>  !
				
				
				
	* TypeCasting :
	
			Converting one data type into another data type is know as TypeCasting
			
			1. Implicit TypeCasting (Widening TypeCasting) :
					
					TypeCasting is done by JVM  
					
			byte -> short -> int -> long -> float -> double 
			
			char -> int 
			
			
			2. Explicit TypeCasting (Narrowing TypeCasting) :   
			
					TypeCasting is done by user 
					
					
			double -> float -> long -> int -> short -> byte 
			
			int -> char  
			
			
			
		Take a Input from User : 
		
			1. import Scanner class from java.util package 
			2. Create the instance of Scanner class (use new keyword to create instance)
			3. We use methods from Scanner class to take input from user 
			
			
			Data Types 				Methods 
			
			byte 					nextByte()
			short 					nextShort()
			int 					nextInt()
			long 					nextLong()
			float 					nextFloat()
			double 					nextDouble()
			char 					next().charAt(0)
			boolean 				nextBoolean()
			String 					next()  => one word
									nextLine() => whole line
			
			
			
			
	Conditional Statements : 
	
	
		1. If statement 
		2. If-else Statement
		3. If-Else-If Statement (If-Else Ladder) 
		4. Nested If-Else 
		5. Switch Case (Replaces the If-Else Ladder)
		
		
		
		5. Switch Case : 
		
			1. Switch case can only check for equal to condition 
			2. We can only use switch case on int, short, byte, char, String
			
			
			
			Switch (var_name){			
			
				case value1 :  Statement; 
							  break;
							  
				case value2 : Statement; 
							  break;
							  
				case value3 : Statement; 
							  break;
							  
				default : Statement; 			  
							  
				
			}
			
			
			
		Looping Statements : 
		
		
		1. Initilazation 
		2. Boolean Condition 
		3. Upgradation (increment/decrement)
		
		
			Types of Loops : 
			
			
			1. For Loop      => when you know the endpoint 
			2. While Loop    => when you don't know the endpoint 
			3. Do-While Loop => when you don't know the endpoint
			
			
			While will check the condition every time and do-while will not check 
			the condition for the first time 
			
			
			1. For Loop : 
			
			
				for(Initilazation; Boolean Condition; Upgradation;){
							Statement; 
						
				}
			
			
			2. While Loop :
			
			
				Initilazation;
				
				while(Boolean Condition){
					statement;
					Upgradation;
				}
				
				
			3. Do-While Loop : 
			
			
				Initilazation;
				
				do{
					statement;
					Upgradation;
				}while(Boolean Condition);
				
				
				
		
		Array : 
		
			Collection of the values of similar data types 
			
			Create a Array : 
			
			1. Provide the Size of array 
			
			datatype[] var_name = new datatype[size];  			
		
			datatype var_name[] = new datatype[size];
			
			2. Dynamic Array 
			
			datatype var_name[] = {val1, val2, val3, .....};
			
			
			Indexing : 
			
				Size : 5 
				
				
				0  1  2  3  4 
				10 20 30 40 50
				
				Add values inside the Array : 
				
				var_name[index] = value;
				
				var_name[0] = 10; 


		* Iteration over array :
		
			visiting each node of array 
			
			1. Normal for Loop : 
			
				for(int i = 0; i <= size-1; i++){
					System.out.println(var_name[i]);
				}		


			2. Enchanced for Loop ; 
			
				for(datatype var_name : arr_name){
					System.out.println(var_name);
				}



			MultiDimentional Array :
			
			
			Students			Eng 	Maths	Sci  
			
			s1					23		44	     55	    {23		44	     55}
			s2					67		56		 77 	{67		56		 77}
			s3 					45		44		 66		{45		44		 66}
			s4					56		65		 76		{56		65		 76}
			
			Arrays inside the array 
			
			
				datatype[][] arr_name = new datatype[size][size]
				
				int[][] arr = new int[4][3]
				
				
				arr[0][0] 
				
				
				VarArgs
			
				










   